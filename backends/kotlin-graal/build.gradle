buildscript {
    ext {
        kotlinVersion = '1.9.22'
        grpcVersion = '1.60.0'
        grpcKotlinVersion = '1.4.1'
        coroutinesVersion = '1.7.3'
    }
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}


plugins {
    id "com.google.protobuf" version "0.9.4"
    id 'idea'
    id 'application'
    id "org.jetbrains.kotlin.jvm" version "1.9.22"
}

group 'fr.fbernard.newsapp'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}


compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "17"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "17"
    }
}


sourceSets {
    generated{
        java.srcDir "${buildDir}/generated/src/proto/"
    }
    main {
        proto {
            srcDir '../../protos/'
        }
    }
}


jar {
    manifest {
        attributes 'Main-Class': 'fr.fbernard.newsapp.backend.NewsAppServer'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

dependencies{
    implementation("org.jetbrains.kotlin:kotlin-stdlib")
    implementation("io.grpc:grpc-netty:$grpcVersion")
    implementation("io.grpc:grpc-protobuf:$grpcVersion")
    implementation("io.grpc:grpc-stub:$grpcVersion")
    implementation("io.grpc:grpc-kotlin-stub:$grpcKotlinVersion")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion")
    implementation("javax.annotation:javax.annotation-api:1.2")
}

mainClassName = "fr.fbernard.newsapp.backend.NewsAppServer"

protobuf {
    protoc { artifact = 'com.google.protobuf:protoc:3.25.1' }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
        grpckt { artifact = "io.grpc:protoc-gen-grpc-kotlin:$grpcKotlinVersion:jdk8@jar" }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
            grpckt{}
        }
    }
}

task nativeImage(dependsOn: jar, type: Exec) {
    commandLine 'native-image' ,"-jar", "${jar.archiveFile.get().getAsFile()}",  "-H:ReflectionConfigurationFiles=$project.rootDir/graal-reflection.json" ,"--initialize-at-run-time=io.netty.handler.codec.http2.Http2CodecUtil,io.netty.handler.codec.http2.DefaultHttp2FrameWriter",  "-H:+ReportExceptionStackTraces", "--allow-incomplete-classpath"
}