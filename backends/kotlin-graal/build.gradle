buildscript {
    ext {
        kotlinVersion = '1.3.50'
        protobufGradleVersion = '0.8.10'
        grpcVersion = '1.23.0'
        rxgrpcVersion = '1.0.0'
        rxjavaVersion = '2.2.7'
    }
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}


plugins {
    id "com.google.protobuf" version "0.8.10"
    id 'idea'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.3.50'
}

group 'fr.fbernard.newsapp'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}


sourceSets {
    generated{
        java.srcDir "${buildDir}/generated/src/proto/"
    }
    main {
        proto {
            srcDir '../../protos/'
        }
    }
}


jar {
    manifest {
        attributes 'Main-Class': 'fr.fbernard.newsapp.backend.NewsAppServer'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

dependencies{
    compile "io.grpc:grpc-netty:$grpcVersion"
    compile "io.grpc:grpc-protobuf:$grpcVersion"
    compile "io.grpc:grpc-stub:$grpcVersion"

    compile "com.salesforce.servicelibs:rxgrpc-stub:$rxgrpcVersion"
    compile "io.reactivex.rxjava2:rxjava:$rxjavaVersion"

    compileOnly "com.oracle.substratevm:svm:1.0.0-rc15"
}

mainClassName = "fr.fbernard.newsapp.backend.NewsAppServer"

protobuf {
    protoc { artifact = 'com.google.protobuf:protoc:3.9.1' }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
        rxgrpc { artifact = "com.salesforce.servicelibs:rxgrpc:${rxgrpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
            rxgrpc{}
        }
    }
}

task nativeImage(dependsOn: jar, type: Exec) {
    commandLine 'native-image' ,"-jar", "${jar.archiveFile.get().getAsFile()}",  "-H:ReflectionConfigurationFiles=$project.rootDir/graal-reflection.json" ,"--initialize-at-run-time=io.netty.handler.codec.http2.Http2CodecUtil,io.netty.handler.codec.http2.DefaultHttp2FrameWriter",  "-H:+ReportExceptionStackTraces", "--allow-incomplete-classpath"
}