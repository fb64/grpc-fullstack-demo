/**
 * @fileoverview gRPC-Web generated client stub for demo
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v4.25.2
// source: news_service.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.demo = require('./news_service_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.demo.NewsServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.demo.NewsServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.demo.NewsRequest,
 *   !proto.demo.NewsResponse>}
 */
const methodDescriptor_NewsService_getNews = new grpc.web.MethodDescriptor(
  '/demo.NewsService/getNews',
  grpc.web.MethodType.UNARY,
  proto.demo.NewsRequest,
  proto.demo.NewsResponse,
  /**
   * @param {!proto.demo.NewsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.demo.NewsResponse.deserializeBinary
);


/**
 * @param {!proto.demo.NewsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.demo.NewsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.demo.NewsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.demo.NewsServiceClient.prototype.getNews =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/demo.NewsService/getNews',
      request,
      metadata || {},
      methodDescriptor_NewsService_getNews,
      callback);
};


/**
 * @param {!proto.demo.NewsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.demo.NewsResponse>}
 *     Promise that resolves to the response
 */
proto.demo.NewsServicePromiseClient.prototype.getNews =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/demo.NewsService/getNews',
      request,
      metadata || {},
      methodDescriptor_NewsService_getNews);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.demo.SubscribeRequest,
 *   !proto.demo.News>}
 */
const methodDescriptor_NewsService_subscribe = new grpc.web.MethodDescriptor(
  '/demo.NewsService/subscribe',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.demo.SubscribeRequest,
  proto.demo.News,
  /**
   * @param {!proto.demo.SubscribeRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.demo.News.deserializeBinary
);


/**
 * @param {!proto.demo.SubscribeRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.demo.News>}
 *     The XHR Node Readable Stream
 */
proto.demo.NewsServiceClient.prototype.subscribe =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/demo.NewsService/subscribe',
      request,
      metadata || {},
      methodDescriptor_NewsService_subscribe);
};


/**
 * @param {!proto.demo.SubscribeRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.demo.News>}
 *     The XHR Node Readable Stream
 */
proto.demo.NewsServicePromiseClient.prototype.subscribe =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/demo.NewsService/subscribe',
      request,
      metadata || {},
      methodDescriptor_NewsService_subscribe);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.demo.News,
 *   !proto.demo.News>}
 */
const methodDescriptor_NewsService_postNews = new grpc.web.MethodDescriptor(
  '/demo.NewsService/postNews',
  grpc.web.MethodType.UNARY,
  proto.demo.News,
  proto.demo.News,
  /**
   * @param {!proto.demo.News} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.demo.News.deserializeBinary
);


/**
 * @param {!proto.demo.News} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.demo.News)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.demo.News>|undefined}
 *     The XHR Node Readable Stream
 */
proto.demo.NewsServiceClient.prototype.postNews =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/demo.NewsService/postNews',
      request,
      metadata || {},
      methodDescriptor_NewsService_postNews,
      callback);
};


/**
 * @param {!proto.demo.News} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.demo.News>}
 *     Promise that resolves to the response
 */
proto.demo.NewsServicePromiseClient.prototype.postNews =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/demo.NewsService/postNews',
      request,
      metadata || {},
      methodDescriptor_NewsService_postNews);
};


module.exports = proto.demo;

